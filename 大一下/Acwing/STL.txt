vector:变长数组，倍增思想
    #include<vector>
        vector<int>a(n,m);//定义一个长度为n的数组，里面值为m
        a.size();//返回元素个数
        a.empty();//返回a是否为空
        a.clear();//清空a
        a.front()/back();//第一个数/最后一个
        a.pusk_back()/pop_back();//添加/删除最后一个
        a.begin()/a.end();
        a[]


pair:二元组
    pair<int,string>p;
    p.first;//第一个
    p.second;//第二个


string:字符串
    s.size()/length();
    s.empty();
    s+="abc";
    s+='c';
    s.substr(n,m);//返回从索引n开始长度为m的字串，m可以省


queue：队列
    q.push();//队尾添加
    q.front();//返回队首
    q.back();//返回队尾
    q.pop();//删除队首
    q.size();//返回大小
    q.empty();//是否为空


priority_queue:优先队列(堆)默认是大根堆
    priority_queue<int>h;//定义优先队列,默认是大根堆
    h.push();//插入
    h.top();//返回队首
    h.pop();//删除队首
    priority_queue<int，vector<int>,greater<int>>h;//定义小根堆


stack:栈
    s.push();//栈顶添加
    s.top();//返回栈顶
    s.pop();//删除栈顶
    s.size();//返回大小
    s.empty();//是否为空


deque:双端队列,效率低
    dq.size();
    dq.empty();
    dq.clear();
    dq.front()/back();
    dq.push_back()/pop_back();
    dq.begin()/end();
    dq[];
    

set/multiset:集合.multiset可以有多个相同的数，基于平衡树
    set/multiset<int>s;
    s.insert();
    s.empty();
    s.size();
    s.find(x);//查找x，没有返回s.end();
    s.count(x);//返回x的个数
    s.erase(x);//1.输入一个数删除这个数，2.输入迭代器，删除这个迭代器
    s.lower_bound(x);//返回大于等于x的最小的数的迭代器
    s.up_bound(x);//返回大于等于x的最小的数的迭代器


map/multimap:字典，基于平衡树
    map/multimap<int,int>mp；
    mp.insert();
    mp.erase();
    mp.find();
    mp[];//时间复杂度O(logn);
    mp.lower_bound(x);//返回大于等于x的最小的数的迭代器
    mp.up_bound(x);//返回大于等于x的最小的数的迭代器


unordered_set/multiset/map/multimap:哈希表
    增删改查时间复杂度是O(1);\
    不支持lower_bound(),up_bound();


bitset:压位，比bool省8倍空间
    bitset<n> b;//n为个数
    ~,&,|,^
    >>,<<
    ==,!=
    []

    count();//返回有多少个1

    any(nn);//是否有nn个1
    none();//是否全为0

    set();//把所有变成1
    set(n,k);//把第k位变成1

    flip();//等价于~
    flip(k);//第k位取反